---
title:  "Recursive Algorithm"
excerpt: "재귀 알고리즘"

categories: algorithm
tags: algorithm

date: 2021-02-05
last_modified_at: 2021-02-05

layout: post
comments: true
use_math: true
---

**재귀**는 어떠한 사건에서 자기 자신을 포함하고 다시 자기 자신을 사용하여 정의하는 경우를 뜻합니다. 대표적인 예시로 자연수의 정의와 팩토리얼이 있습니다. 자연수의 정의는 어떤 자연수의 바로 다음 수도 자연수입니다. 팩토리얼은 `factorial()` 함수의 원리로 이해할 수 있는데요. `factorial()` 함수는 `n*factorial(n-1)`로 계산하고 이 과정에서 자신과 똑같은 함수를 호출합니다. **재귀 알고리즘**은 풀어야 할 문제나 계산할 함수 또는 처리할 자료구조가 이렇게 **재귀적으로 정의**되는 경우에 적용됩니다.

재귀 알고리즘을 **비재귀적**으로 나타내는 방법으로는 맨 끝에서 실행되는 재귀 호출인 **꼬리 재귀를 제거**하거나 **스택**을 이용하여 값을 저장하는 방법이 있습니다.

다음으로는 쌓아 놓은 원반을 최소 횟수로 옮기는 알고리즘인 **하노이의 탑**을 알아보겠습니다. 하노이의 탑은 작은 원반이 위에 큰 원반이 아래에 위치하는 규칙을 지키면서 최소횟수로 시작 기둥에서 목표 기둥으로 옮기는 문제입니다. 원반이 3개일 때 전체 이동 과정은 다음과 같은 과정으로 이동합니다.

1. 바닥에 있는 원반을 제외한 그룹을 1기둥에서 2기둥으로 옮깁니다.
2. 바닥에 있는 원반을 1기둥에서 3기둥으로 옮겼다는 것을 출력합니다.
3. 바닥에 있는 원반을 제외한 그룹을 2기둥에서 3기둥으로 옮깁니다.

이 때, `과정 1`과 `과정 3`을 재귀 호출로 구현할 수 있습니다.

이처럼 차례대로 가지가 뻗어 나가듯이 배치 조합을 열거하는 방법을 **분기(branching) 작업** 이라고 합니다. 하노이의 탑처럼 큰 문제를 작은 문제로 분할하고 작은 문제 풀이법을 결합하여 전체 풀이법을 얻는 방법을 **분할 정복법(분할 해결법)** 이라고 합니다. 여기서 주의할 점은 문제를 분할할 때 작은 문제 풀이법에서 원래의 문제 풀이법을 쉽게 도출할 수 있도록 설계해야 합니다.

문제 풀이에서 필요하지 않은 분기를 없애서 불필요한 조합을 열거하지 않는 방법을 **한정(bounding) 작업** 이라고 합니다. 분기 적업과 한정 작업을 조합하여 문제를 풀이하는 방법을 **분기 한정법(branching and bounding method)** 이라고 합니다.
